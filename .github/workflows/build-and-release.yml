name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  python-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build
          ls -al dist/

      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      - name: Zip python package
        run: |
          mkdir -p upload
          zip -j upload/k230-flash-${{ env.VERSION }}.zip dist/*

      # - name: Upload Python Release Asset
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: upload/k230-flash-${{ env.VERSION }}.zip
      #     prerelease: true

      # - name: Upload Python Nightly Artifact
      #   if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: k230-flash-${{ env.VERSION }}
      #     path: upload/k230-flash-${{ env.VERSION }}.zip

  gui-release:
    strategy:
      matrix:
        include:
        - os: ubuntu-22.04
          label: ubuntu
        # - os: windows-2022
        #   label: windows
        # - os: macos-13
        #   label: macos
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX / 7zip (Windows only)
        if: matrix.label == 'windows'
        run: |
          choco install upx -y
          choco install 7zip -y

      # - name: Install 7zip (Ubuntu only)
      #   if: matrix.label == 'ubuntu'
      #   run: |
      #     sudo apt-get install p7zip-full -y

      # Determine version
      - name: Determine version
        id: version
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
          echo "JimmyDebug 1"

      # Ubuntu AppImage using Docker + FUSE
      - name: Package GUI (Linux with Docker & FUSE)
        if: matrix.label == 'ubuntu'
        run: |
          mkdir -p upload
          docker run --rm \
            --privileged \
            --device /dev/fuse \
            -v "${{ github.workspace }}:/workspace" \
            -w /workspace \
            python:3.11-bullseye \
            bash -c "
              apt-get update && apt-get install -y build-essential wget curl git libfuse2 fuse
              pip install --upgrade pip
              pip install pyinstaller
              pip install -r requirements.txt
              pip install -e .

              wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
              chmod +x /usr/local/bin/appimagetool

              # 构建 GUI
              cd src/gui
              pyinstaller --clean k230_flash_gui.spec

              # 创建 AppDir
              APPDIR=\$(pwd)/AppDir
              rm -rf \$APPDIR
              mkdir -p \$APPDIR/usr/bin
              cp dist/k230_flash_gui \$APPDIR/usr/bin/

              mkdir -p \$APPDIR/usr/share/pixmaps
              cp -r assets \$APPDIR/usr/share/

              echo '[Desktop Entry]'          >  \$APPDIR/k230_flash_gui.desktop
              echo 'Type=Application'        >> \$APPDIR/k230_flash_gui.desktop
              echo 'Name=k230_flash_gui'     >> \$APPDIR/k230_flash_gui.desktop
              echo 'Exec=/usr/bin/k230_flash_gui' >> \$APPDIR/k230_flash_gui.desktop
              echo 'Icon=k230_flash_gui'     >> \$APPDIR/k230_flash_gui.desktop
              echo 'Categories=Utility;'     >> \$APPDIR/k230_flash_gui.desktop

              cp assets/k230_flash_gui_logo.png \$APPDIR/k230_flash_gui.png

              # 打包 AppImage
              ARCH=x86_64 appimagetool --no-appstream \$APPDIR /workspace/upload/k230_flash_gui-ubuntu-${{ env.VERSION }}.AppImage
            "

      
      # PyInstaller 构建 GUI
      # - name: Build GUI with pyinstaller
      #   run: |
      #     pip install --upgrade pip
      #     pip install pyinstaller
      #     pip install -r requirements.txt
      #     pip install -e .
      #     cd src/gui
      #     pyinstaller --clean k230_flash_gui.spec
      #     echo "JimmyDebug 2"


      # # zip
      # - name: Package GUI Zip
      #   run: |
      #     mkdir -p upload
      #     cd src/gui/dist
      #     7z a ../../../upload/k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}.zip *

      # 上传 release
      # - name: Upload GUI Release Asset
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: upload/*
      #     prerelease: true

      # - name: Upload GUI Nightly Artifact
      #   if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}
      #     path: upload/*
