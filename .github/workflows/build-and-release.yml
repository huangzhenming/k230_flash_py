name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  python-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build
          ls -al dist/

      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      - name: Zip python package
        run: |
          mkdir -p upload
          zip -j upload/k230-flash-${{ env.VERSION }}.zip dist/*

      - name: Upload Python Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: upload/k230-flash-${{ env.VERSION }}.zip
          prerelease: true

      - name: Upload Python Nightly Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: k230-flash-${{ env.VERSION }}
          path: upload/k230-flash-${{ env.VERSION }}.zip

  gui-release:
    strategy:
      matrix:
        include:
        - os: ubuntu-22.04
          label: ubuntu
        - os: windows-2022
          label: windows
        - os: macos-13
          label: macos
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX / 7zip (Windows only)
        if: matrix.label == 'windows'
        run: |
          choco install upx -y
          choco install 7zip -y

      # Determine version
      - name: Determine version
        id: version
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      # PyInstaller 构建 GUI
      - name: Build GUI with pyinstaller
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pip install -e .
          cd src/gui
          pyinstaller --clean k230_flash_gui.spec

      # Windows zip
      - name: Package GUI (Windows)
        if: matrix.label == 'windows'
        run: |
          mkdir -p upload
          cd src/gui/dist
          7z a ../../../upload/k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}.zip *

      # 上传 release
      - name: Upload GUI Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
          prerelease: true

      - name: Upload GUI Nightly Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}
          path: upload/*
