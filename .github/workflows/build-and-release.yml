name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  python-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: |
          python -m build
          ls -al dist/
      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
      - name: Zip python package
        run: |
          mkdir -p upload
          zip -j upload/k230-flash-${{ env.VERSION }}.zip dist/*
      - name: Upload Python Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: upload/k230-flash-${{ env.VERSION }}.zip
          prerelease: true
      - name: Upload Python Nightly Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: k230-flash-${{ env.VERSION }}
          path: upload/k230-flash-${{ env.VERSION }}.zip

  gui-release:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          label: ubuntu
          container: python:3.11-bullseye
        - os: windows-2022
          label: windows
        - os: macos-13
          label: macos
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container || '' }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # Ubuntu container 安装依赖
      - name: Install dependencies (Linux only)
        if: matrix.label == 'ubuntu'
        run: |
          apt-get update
          apt-get install -y build-essential wget curl git libfuse2 fuse
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pip install -e .
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      # Windows & macOS 安装依赖
      - name: Install pyinstaller and project (macOS & Windows)
        if: matrix.label != 'ubuntu'
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pip install -e .

      - name: Install UPX / 7zip (Windows only)
        if: matrix.os == 'windows-2022'
        run: |
          choco install upx -y
          choco install 7zip -y

      # Determine version
      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          else
            VERSION="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      # PyInstaller 构建 GUI
      - name: Build GUI with pyinstaller
        run: |
          cd src/gui
          pyinstaller --clean k230_flash_gui.spec

      # Windows zip
      - name: Package GUI (Windows)
        if: matrix.label == 'windows'
        run: |
          mkdir -p upload
          cd src/gui/dist
          7z a ../../../upload/k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}.zip k230_flash_gui.exe

      # macOS dmg
      - name: Package GUI (macOS)
        if: matrix.label == 'macos'
        run: |
          REPO_ROOT=$(pwd)              # 仓库根目录
          UPLOAD_DIR="$REPO_ROOT/upload"
          mkdir -p "$UPLOAD_DIR"

          TMPDIR=$(mktemp -d)
          cp src/gui/dist/k230_flash_gui "$TMPDIR/k230_flash_gui.app/Contents/MacOS/"

          cd "$TMPDIR"
          hdiutil create -volname "k230_flash_gui" \
            -srcfolder "k230_flash_gui.app" \
            -ov -format UDZO \
            "$UPLOAD_DIR/k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}.dmg"

      # Ubuntu AppImage
      - name: Package GUI (Linux)
        if: matrix.label == 'ubuntu'
        run: |
          mkdir -p upload
          # 创建 AppDir
          APPDIR=$(pwd)/AppDir
          rm -rf "$APPDIR"
          mkdir -p "$APPDIR/usr/bin"

          cd src/gui/dist
          cp k230_flash_gui "$APPDIR/usr/bin/"

          mkdir -p "$APPDIR/usr/share/pixmaps"
          cp -r ../assets "$APPDIR/usr/share/"

          # Desktop 文件
          cat > "$APPDIR/k230_flash_gui.desktop" <<EOF
          [Desktop Entry]
          Type=Application
          Name=k230_flash_gui
          Exec=/usr/bin/k230_flash_gui
          Icon=k230_flash_gui
          Categories=Utility;
          EOF

          # 根目录图标
          cp ../assets/k230_flash_gui_logo.png "$APPDIR/k230_flash_gui.png"

          # 打包 AppImage
          ARCH=x86_64 appimagetool --no-appstream "$APPDIR" "../../../upload/k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}.AppImage"

      # 上传 release
      - name: Upload GUI Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
          prerelease: true

      - name: Upload GUI Nightly Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: k230_flash_gui-${{ matrix.label }}-${{ env.VERSION }}
          path: upload/*

